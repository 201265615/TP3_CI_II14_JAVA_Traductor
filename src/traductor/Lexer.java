/* The following code was generated by JFlex 1.4.3 on 11/26/14 10:53 AM */

   
/* --------------------------Usercode Section------------------------ */

package traductor;
 
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import traductor.Token;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/26/14 10:53 AM from the specification file
 * <tt>lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\4\1\67\1\0"+
    "\2\70\1\0\1\70\1\35\2\0\1\60\1\61\1\66\1\61\1\62"+
    "\1\0\12\57\1\0\1\66\3\0\1\67\1\70\1\14\1\10\1\50"+
    "\1\31\1\5\1\70\1\65\1\46\1\30\1\55\1\7\1\25\1\13"+
    "\1\15\1\11\1\27\1\70\1\24\1\21\1\17\1\26\1\64\1\32"+
    "\1\63\1\33\1\70\1\71\1\0\1\71\2\0\1\43\1\14\1\10"+
    "\1\50\1\31\1\5\1\70\1\65\1\46\1\30\1\55\1\7\1\25"+
    "\1\13\1\15\1\11\1\27\1\70\1\24\1\22\1\17\1\26\1\64"+
    "\1\32\1\63\1\33\1\70\46\0\1\66\22\0\1\52\12\0\1\67"+
    "\1\51\1\54\7\0\1\40\1\0\1\37\1\36\1\45\1\72\2\0"+
    "\1\56\1\44\1\53\2\0\1\42\2\0\1\41\1\47\5\0\1\51"+
    "\1\54\7\0\1\40\1\0\1\37\1\36\1\45\1\72\2\0\1\56"+
    "\1\44\1\53\2\0\1\42\2\0\1\41\1\47\u0205\0\1\23\1\20"+
    "\1\6\1\16\4\0\1\12\u0115\0\1\34\37\0\1\34\ufbc1\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\2\1\3\4\1\1\4\2\1\1\3\1\2"+
    "\7\1\2\5\3\0\1\1\2\0\1\1\1\0\1\6"+
    "\1\0\3\7\1\1\3\0\2\1\1\3\4\1\1\4"+
    "\1\0\1\10\2\0\3\1\2\0\4\1\1\11\1\1"+
    "\1\0\2\1\1\4\2\1\1\10\1\0\14\1\1\0"+
    "\1\4\1\3\1\5\1\1\6\0\1\12\2\0\2\1"+
    "\1\0\1\1\1\0\2\6\1\0\2\6\1\0\2\13"+
    "\2\0\6\1\6\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\4\1\1\0\3\1\1\5\1\1\1\3\4\1"+
    "\2\0\1\11\3\1\4\0\1\1\5\0\3\1\6\0"+
    "\4\1\2\0\1\13\1\0\1\13\1\0\1\1\3\0"+
    "\2\1\1\0\2\1\1\0\3\1\3\0\1\3\2\1"+
    "\7\0\1\14\1\0\1\1\5\0\2\1\1\15\1\1"+
    "\4\0\1\13\1\0\1\1\1\4\1\1\1\12\1\1"+
    "\1\0\2\1\2\0\1\13\2\0\1\1\3\0\3\1"+
    "\2\0\5\1\2\0\1\1\2\0\1\13\4\1\3\0"+
    "\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\166\0\u019d\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\u0887\0\u08c2\0\166\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u049c\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\166\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\166\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u019d\0\u11bf\0\166\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\166\0\u1397"+
    "\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\166"+
    "\0\u0760\0\u0725\0\u0760\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833"+
    "\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u019d\0\u1d0a\0\u1d45\0\u1d80"+
    "\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58"+
    "\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308"+
    "\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\u251b\0\u2556\0\u2591\0\u25cc\0\166\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u019d\0\u29f2"+
    "\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca"+
    "\0\166\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67"+
    "\0\u2da2\0\u2ddd\0\u019d\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04"+
    "\0\u1620\0\u2f3f\0\u2f7a\0\166\0\u2fb5\0\u019d\0\u2ff0\0\u302b"+
    "\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u019d\0\u3152\0\u318d\0\u31c8"+
    "\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0"+
    "\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578"+
    "\0\u35b3\0\u35ee\0\u2f3f\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715"+
    "\0\u3750\0\u11bf\0\u378b\0\u37c6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\2\3\1\4\1\5\1\0\1\6\1\7"+
    "\1\10\1\0\1\11\1\12\1\13\1\0\1\14\1\0"+
    "\1\15\1\16\1\0\1\17\1\20\1\10\1\21\1\22"+
    "\1\23\1\24\1\25\2\0\1\26\1\27\1\30\1\31"+
    "\2\0\1\32\1\0\1\10\1\0\1\33\1\34\2\0"+
    "\1\35\1\36\1\37\1\40\1\0\1\41\1\42\3\10"+
    "\1\43\1\44\1\10\1\45\3\0\1\3\240\0\1\46"+
    "\22\0\1\10\1\47\3\10\1\0\3\10\1\0\1\10"+
    "\1\50\2\51\1\0\5\10\1\52\2\10\1\0\1\53"+
    "\10\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\54\1\0\3\10"+
    "\1\0\1\10\1\55\1\10\1\0\1\10\1\0\2\10"+
    "\1\0\1\56\1\10\1\57\1\10\1\60\3\10\10\0"+
    "\1\61\1\62\1\10\1\0\1\10\1\63\1\0\1\64"+
    "\1\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\65\1\0\2\10\1\66\1\0\3\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\67\5\10\1\70"+
    "\10\0\1\71\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\10\1\0"+
    "\3\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0"+
    "\10\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\10\1\0"+
    "\3\10\1\0\1\10\1\72\1\10\1\0\1\10\1\0"+
    "\2\10\1\0\10\10\2\0\1\31\5\0\1\64\1\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\1\73\2\10"+
    "\1\0\3\10\1\0\1\10\1\0\2\10\1\0\1\10"+
    "\1\74\4\10\1\75\1\10\1\0\1\76\1\53\6\0"+
    "\1\53\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\77\1\10\1\0\1\10\1\0\2\10"+
    "\1\0\10\10\12\0\1\10\1\0\1\10\3\0\1\100"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\7\0"+
    "\1\101\1\0\1\102\2\10\1\0\1\10\1\103\1\10"+
    "\1\0\1\10\1\0\2\104\1\0\2\10\1\105\5\10"+
    "\6\0\1\106\3\0\1\10\1\107\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\7\0\1\110"+
    "\1\0\1\111\2\10\1\0\1\10\1\112\1\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\113\5\10\12\0"+
    "\1\114\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\2\10\1\115"+
    "\1\0\3\10\1\0\1\10\1\0\2\10\1\0\10\10"+
    "\12\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\0\3\10\1\0\1\10\1\0\2\10\1\0\4\10"+
    "\1\116\3\10\12\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\7\0\1\10"+
    "\1\0\3\10\1\0\1\10\1\117\1\10\1\0\1\10"+
    "\1\0\2\10\1\0\10\10\12\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\120\1\0\3\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\10\10\1\0\1\53\10\0\1\10"+
    "\1\0\1\121\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\7\0\1\10\1\0\3\10\1\0\1\10"+
    "\1\122\1\10\1\0\1\10\1\0\2\10\1\0\4\10"+
    "\1\123\3\10\5\0\1\64\1\124\3\0\1\10\1\0"+
    "\1\10\4\0\1\10\1\0\1\10\3\0\3\10\1\0"+
    "\2\10\7\0\1\10\1\0\3\10\1\0\1\10\1\125"+
    "\1\10\1\0\1\10\1\0\2\10\1\0\10\10\2\0"+
    "\1\126\1\0\1\127\4\0\1\53\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\65\1\0\3\10\1\0\1\10\1\130\1\10"+
    "\1\0\1\10\1\0\2\10\1\0\10\10\3\0\1\131"+
    "\2\0\1\132\3\0\1\10\1\0\1\10\1\133\3\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\23\0"+
    "\2\127\122\0\1\134\35\0\1\135\15\0\1\136\46\0"+
    "\1\137\25\0\1\140\61\0\1\141\53\0\1\10\1\0"+
    "\3\10\1\0\1\10\1\142\1\10\1\0\1\10\1\0"+
    "\2\10\1\0\10\10\12\0\1\143\1\0\1\10\4\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\23\0"+
    "\2\144\57\0\1\64\70\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\2\10\1\145"+
    "\5\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\146\72\0"+
    "\1\10\1\0\3\10\1\0\3\10\1\0\1\10\1\0"+
    "\2\10\1\0\10\10\12\0\1\10\1\0\1\10\4\0"+
    "\1\10\1\0\1\147\1\150\1\0\1\151\3\10\1\0"+
    "\2\10\61\0\1\152\2\0\1\151\67\0\1\153\104\0"+
    "\1\45\10\0\1\154\72\0\1\155\7\0\1\156\100\0"+
    "\1\157\5\0\1\160\44\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\161\1\0\2\10\1\0\10\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\2\10\1\162"+
    "\5\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\10\1\0"+
    "\3\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0"+
    "\10\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\1\10\1\163\1\10\1\0\2\10\7\0"+
    "\1\10\1\0\3\10\1\0\2\10\1\164\1\0\1\10"+
    "\1\0\2\10\1\0\1\10\1\165\6\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\7\0\1\10\1\0\3\10\1\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\0\10\10\10\0\1\64"+
    "\1\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\0\3\10\1\0\1\166\1\167\2\10\1\170\10\10"+
    "\12\0\1\10\1\0\1\10\3\0\1\64\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\10\1\0"+
    "\3\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0"+
    "\10\10\6\0\1\171\3\0\1\10\1\0\1\10\1\107"+
    "\3\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\15\0\1\135\104\0\1\172\1\0\1\173\5\0\1\140"+
    "\72\0\1\140\42\0\1\10\1\0\3\10\1\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\0\10\10\1\0\1\76"+
    "\10\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\174\3\10\1\0\1\10\1\0\2\10\1\0\10\10"+
    "\12\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\175\1\10\1\0\1\10\1\0\2\10"+
    "\1\0\10\10\12\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\14\0\1\176"+
    "\105\0\1\106\52\0\1\10\1\0\3\10\1\0\2\10"+
    "\1\177\1\0\1\10\1\0\2\10\1\0\10\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\10\10\3\0"+
    "\1\200\6\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\10\1\0"+
    "\3\10\1\0\1\10\1\201\1\10\1\0\1\10\1\0"+
    "\2\10\1\0\10\10\12\0\1\10\1\0\1\10\4\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\7\0"+
    "\1\10\1\0\3\10\1\0\3\10\1\0\1\10\1\0"+
    "\2\10\1\0\10\10\12\0\1\10\1\0\1\10\3\0"+
    "\1\64\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\10\1\0\3\10\1\0\1\202\2\10\1\0"+
    "\1\10\1\0\2\10\1\0\4\10\1\203\3\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\30\0\1\64\51\0\1\10\1\0"+
    "\3\10\1\0\3\10\1\0\1\10\1\0\2\10\1\204"+
    "\10\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\205\1\0"+
    "\3\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0"+
    "\10\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\10\1\0"+
    "\3\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0"+
    "\1\10\1\206\6\10\12\0\1\10\1\0\1\10\4\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\1\0"+
    "\1\106\5\0\1\10\1\0\2\10\1\207\1\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\0\2\10\1\210\5\10"+
    "\12\0\1\10\1\0\1\10\2\0\1\211\1\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\7\0\1\10"+
    "\1\0\3\10\1\0\3\10\1\0\1\10\1\0\2\10"+
    "\1\0\1\212\7\10\12\0\1\10\1\0\1\10\4\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\17\0"+
    "\1\135\62\0\1\10\1\0\3\10\1\0\2\10\1\213"+
    "\1\0\1\10\1\0\2\10\1\0\10\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\7\0\1\214\1\0\3\10\1\0\1\10"+
    "\1\215\1\10\1\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\216\5\10\12\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\7\0\1\10"+
    "\1\0\3\10\1\0\3\10\1\0\1\10\1\0\2\10"+
    "\1\0\10\10\1\0\1\217\10\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\10\1\0\3\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\1\10\1\220\6\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\7\0\1\10\1\0\1\221\2\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\10\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\10\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\1\222\2\10\1\0\2\10\7\0\1\10\1\0\1\10"+
    "\1\223\1\10\1\0\3\10\1\0\1\10\1\0\2\10"+
    "\1\0\10\10\12\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\7\0\1\10"+
    "\1\0\3\10\1\0\3\10\1\0\1\10\1\224\2\10"+
    "\1\225\10\10\12\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\7\0\1\10"+
    "\1\0\3\10\1\0\3\10\1\0\1\10\1\0\2\10"+
    "\1\0\10\10\1\0\1\226\10\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\10\1\0\3\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\10\10\12\0\1\227\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\10\1\0\1\10\1\230\1\10\1\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\0\6\10\1\231\1\10"+
    "\12\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\0\3\10\1\0\1\10\1\0\2\10\1\0\10\10"+
    "\1\0\1\232\4\0\1\233\3\0\1\10\1\0\1\10"+
    "\1\53\3\0\1\10\1\0\1\10\3\0\3\10\1\0"+
    "\2\10\26\0\1\137\16\0\1\234\36\0\1\235\70\0"+
    "\1\10\1\0\3\10\1\0\3\10\1\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\236\1\10\12\0\1\10\1\0"+
    "\1\10\4\0\1\10\1\0\1\10\3\0\3\10\1\0"+
    "\2\10\54\0\1\237\27\0\1\137\76\0\1\240\104\0"+
    "\1\64\73\0\1\132\106\0\1\241\57\0\1\242\62\0"+
    "\1\243\60\0\1\10\1\0\3\10\1\0\3\10\1\0"+
    "\1\10\1\0\2\10\1\0\1\244\7\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\7\0\1\10\1\0\1\221\2\10\1\0"+
    "\1\10\1\245\1\10\1\0\1\10\1\0\2\10\1\0"+
    "\10\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\50\0\1\64\31\0"+
    "\1\10\1\0\3\10\1\0\3\10\1\0\1\10\1\0"+
    "\2\10\1\0\1\10\1\246\6\10\12\0\1\10\1\0"+
    "\1\10\4\0\1\10\1\0\1\10\3\0\3\10\1\0"+
    "\2\10\37\0\1\53\42\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\10\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\147\2\0"+
    "\1\151\3\10\1\0\2\10\30\0\1\247\55\0\1\250"+
    "\70\0\1\251\1\0\1\252\100\0\1\253\64\0\1\254"+
    "\66\0\1\255\1\0\3\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\10\10\12\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\10\1\0\3\10\1\0\1\10\1\256\1\10"+
    "\1\0\1\10\1\0\2\10\1\0\10\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\7\0\1\10\1\0\3\10\1\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\0\4\10\1\257\3\10"+
    "\12\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\260\1\0\3\10"+
    "\1\0\3\10\1\0\1\10\1\0\2\10\1\0\10\10"+
    "\12\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\0\3\10\1\0\1\10\1\0\2\10\1\0\10\10"+
    "\6\0\1\261\3\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\7\0\1\10"+
    "\1\0\3\10\1\0\3\10\1\0\1\10\1\0\2\10"+
    "\1\0\10\10\12\0\1\10\1\0\1\10\1\64\3\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\11\0"+
    "\1\262\15\0\1\263\72\0\1\176\110\0\1\132\55\0"+
    "\1\264\6\0\1\140\65\0\1\64\51\0\1\265\7\0"+
    "\1\156\5\0\1\157\52\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\10\10\1\0"+
    "\1\127\10\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\35\0\1\160\44\0"+
    "\1\10\1\0\3\10\1\0\3\10\1\266\1\10\1\0"+
    "\2\10\1\0\10\10\12\0\1\10\1\0\1\10\4\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\45\0"+
    "\1\64\34\0\1\10\1\0\1\267\2\10\1\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\0\10\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\7\0\1\10\1\0\3\10\1\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\0\10\10\5\0\1\64"+
    "\4\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\0\3\10\1\0\1\10\1\0\2\10\1\0\10\10"+
    "\1\0\1\232\10\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\26\0\1\270"+
    "\53\0\1\10\1\0\3\10\1\271\3\10\1\0\1\10"+
    "\1\272\2\10\1\0\10\10\12\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\10\1\0\3\10\1\0\1\10\1\273\1\10"+
    "\1\0\1\10\1\0\2\10\1\0\10\10\12\0\1\10"+
    "\1\0\1\10\1\64\3\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\10\10\1\0"+
    "\1\137\10\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\10\1\0"+
    "\3\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0"+
    "\1\274\7\10\12\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\11\0\1\275"+
    "\70\0\1\10\1\0\3\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\1\276\7\10\12\0\1\10\1\0"+
    "\1\10\4\0\1\10\1\0\1\10\3\0\3\10\1\0"+
    "\2\10\7\0\1\10\1\0\3\10\1\0\3\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\277\5\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\10\1\300\2\10\1\0\10\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\10\10\1\0"+
    "\1\140\10\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\37\0\1\76\42\0"+
    "\1\10\1\0\3\10\1\0\3\10\1\0\1\10\1\0"+
    "\2\10\1\0\4\10\1\301\3\10\5\0\1\127\4\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\10\10\6\0"+
    "\1\171\3\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\10\1\0"+
    "\3\10\1\0\1\10\1\302\1\10\1\0\1\10\1\0"+
    "\2\10\1\0\10\10\12\0\1\10\1\0\1\10\4\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\7\0"+
    "\1\303\1\0\3\10\1\0\3\10\1\0\1\10\1\0"+
    "\2\10\1\0\10\10\12\0\1\10\1\0\1\10\4\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\11\0"+
    "\1\304\72\0\1\305\14\0\1\176\75\0\1\306\50\0"+
    "\1\10\1\0\3\10\1\0\1\10\1\307\1\10\1\0"+
    "\1\10\1\0\2\10\1\0\10\10\12\0\1\10\1\0"+
    "\1\10\4\0\1\10\1\0\1\10\3\0\3\10\1\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\310\1\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\0\10\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\7\0\1\10\1\0\2\10\1\311\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\10\10\6\0"+
    "\1\64\3\0\1\10\1\0\1\10\3\0\1\312\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\31\0\1\313"+
    "\115\0\1\53\27\0\1\314\70\0\1\64\72\0\1\10"+
    "\1\0\3\10\1\0\3\10\1\0\1\10\1\0\2\10"+
    "\1\0\10\10\6\0\1\132\3\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\26\0\1\315\1\316\7\0\1\140\17\0\1\317\45\0"+
    "\1\320\51\0\1\106\77\0\1\321\77\0\2\322\55\0"+
    "\1\10\1\0\3\10\1\0\3\10\1\0\1\323\1\0"+
    "\2\10\1\0\10\10\12\0\1\10\1\0\1\10\4\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\7\0"+
    "\1\10\1\0\1\166\2\10\1\0\1\202\2\10\1\0"+
    "\1\10\1\0\2\10\1\0\10\10\12\0\1\10\1\0"+
    "\1\10\4\0\1\10\1\0\1\10\3\0\3\10\1\0"+
    "\2\10\7\0\1\10\1\0\3\10\1\0\3\10\1\0"+
    "\1\10\1\0\2\10\1\0\4\10\1\222\3\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\44\0\1\200\42\0\1\324\112\0"+
    "\1\325\52\0\1\326\65\0\1\327\77\0\1\330\65\0"+
    "\1\10\1\0\1\10\1\331\1\10\1\0\3\10\1\0"+
    "\1\10\1\0\2\10\1\0\10\10\12\0\1\10\1\0"+
    "\1\10\4\0\1\10\1\0\1\10\3\0\3\10\1\0"+
    "\2\10\7\0\1\10\1\0\3\10\1\0\3\10\1\0"+
    "\1\10\1\0\2\10\1\0\1\332\7\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\7\0\1\10\1\0\3\10\1\0\2\10"+
    "\1\333\1\0\1\10\1\0\2\10\1\0\10\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\1\10\1\334"+
    "\1\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0"+
    "\10\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\45\0\1\335\46\0"+
    "\1\336\62\0\1\251\7\0\1\253\100\0\1\316\61\0"+
    "\1\337\63\0\1\10\1\0\3\10\1\0\3\10\1\0"+
    "\1\10\1\0\2\10\1\0\10\10\6\0\1\134\3\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\11\0\1\262\1\0\1\340\21\0"+
    "\1\160\56\0\1\336\5\0\1\341\5\0\1\160\46\0"+
    "\1\265\15\0\1\342\52\0\1\10\1\0\3\10\1\0"+
    "\1\343\2\10\1\0\1\10\1\0\2\10\1\0\10\10"+
    "\12\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\0\3\10\1\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\216\5\10\12\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\16\0\1\344"+
    "\63\0\1\10\1\0\3\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\4\10\1\345\3\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\7\0\1\10\1\0\1\346\2\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\10\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\11\0\1\265\7\0\1\336\5\0"+
    "\1\263\5\0\1\160\44\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\347\1\0\2\10\1\350\10\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\3\10\1\0"+
    "\2\10\1\351\1\0\1\10\1\0\2\10\1\0\10\10"+
    "\12\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\0\3\10\1\0\1\10\1\0\2\10\1\0\1\352"+
    "\7\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\13\0\1\353\72\0"+
    "\1\354\5\0\1\336\67\0\1\76\63\0\1\10\1\0"+
    "\3\10\1\0\1\355\2\10\1\0\1\10\1\356\2\10"+
    "\1\357\3\10\1\360\4\10\12\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\10\1\0\3\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\10\10\1\0\1\361\10\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\23\0\2\321\64\0\1\362\72\0\1\127"+
    "\106\0\1\316\56\0\1\64\65\0\1\363\112\0\1\316"+
    "\5\0\1\140\77\0\1\132\35\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\364\1\10\1\0\1\10\1\0\2\10"+
    "\1\0\10\10\12\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\27\0\1\265"+
    "\52\0\1\265\100\0\1\265\71\0\1\265\67\0\1\265"+
    "\70\0\1\10\1\0\3\10\1\0\1\10\1\257\1\10"+
    "\1\0\1\10\1\0\2\10\1\0\10\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\7\0\1\10\1\0\3\10\1\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\0\5\10\1\365\2\10"+
    "\12\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\366\1\10\1\0\1\10\1\0\2\10"+
    "\1\0\10\10\12\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\21\0\1\322"+
    "\15\0\1\140\46\0\1\252\70\0\1\265\7\0\1\156"+
    "\1\176\4\0\1\341\57\0\1\367\5\0\1\370\61\0"+
    "\1\251\70\0\1\10\1\0\3\10\1\0\1\10\1\371"+
    "\1\10\1\0\1\10\1\0\2\10\1\0\10\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\3\10\1\0"+
    "\1\10\1\372\1\10\1\0\1\10\1\0\2\10\1\0"+
    "\10\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\10\1\0"+
    "\1\373\1\10\1\374\1\0\3\10\1\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\375\5\10\12\0\1\10\1\0"+
    "\1\10\4\0\1\10\1\0\1\10\3\0\3\10\1\0"+
    "\2\10\21\0\1\376\60\0\1\10\1\0\3\10\1\0"+
    "\1\10\1\333\1\10\1\0\1\10\1\0\2\10\1\0"+
    "\10\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\7\0\1\10\1\0"+
    "\3\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0"+
    "\4\10\1\351\3\10\12\0\1\10\1\0\1\10\4\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\14\0"+
    "\1\370\72\0\1\367\107\0\1\157\53\0\1\377\67\0"+
    "\1\10\1\0\1\373\2\10\1\0\3\10\1\0\1\u0100"+
    "\1\0\2\10\1\0\10\10\12\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\52\0\1\u0101\57\0\1\321\63\0\1\u0102\51\0\1\10"+
    "\1\0\3\10\1\0\3\10\1\0\1\10\1\0\2\10"+
    "\1\0\10\10\12\0\1\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\3\0\2\10\1\365\1\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\333\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\10\10\12\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\10\1\0\3\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\1\10\1\236\6\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\27\0\1\u0103\72\0\1\157\52\0\1\10"+
    "\1\0\3\10\1\0\2\10\1\u0104\1\0\1\10\1\0"+
    "\2\10\1\0\10\10\12\0\1\10\1\0\1\10\4\0"+
    "\1\10\1\0\1\10\3\0\3\10\1\0\2\10\7\0"+
    "\1\10\1\0\3\10\1\0\3\10\1\0\1\10\1\0"+
    "\2\10\1\0\1\10\1\u0105\6\10\12\0\1\10\1\0"+
    "\1\10\4\0\1\10\1\0\1\10\3\0\3\10\1\0"+
    "\2\10\7\0\1\10\1\0\3\10\1\0\3\10\1\0"+
    "\1\10\1\0\2\10\1\0\6\10\1\u0106\1\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\3\10\1\326"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\10\10\12\0"+
    "\1\10\1\0\1\10\4\0\1\10\1\0\1\10\3\0"+
    "\3\10\1\0\2\10\7\0\1\10\1\0\3\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\0\1\10\1\u0107"+
    "\6\10\12\0\1\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\30\0\1\u0108\77\0"+
    "\1\u0109\44\0\1\10\1\0\2\10\1\374\1\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\0\10\10\12\0\1\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\50\0\1\u010a\66\0\1\64\35\0\1\10"+
    "\1\0\3\10\1\0\3\10\1\0\1\10\1\0\2\10"+
    "\1\0\10\10\12\0\1\10\1\0\1\351\4\0\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\2\10\7\0\1\10"+
    "\1\0\1\10\1\351\1\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\10\10\12\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\355\1\0\3\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\10\10\12\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\7\0\1\10\1\0\3\10\1\0\3\10\1\0\1\u010b"+
    "\1\0\2\10\1\0\10\10\12\0\1\10\1\0\1\10"+
    "\4\0\1\10\1\0\1\10\3\0\3\10\1\0\2\10"+
    "\22\0\1\176\63\0\1\327\66\0\1\u010c\1\0\3\10"+
    "\1\0\3\10\1\0\1\10\1\0\2\10\1\0\10\10"+
    "\12\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\7\0\1\10\1\0\3\10"+
    "\1\265\3\10\1\0\1\10\1\0\2\10\1\0\10\10"+
    "\12\0\1\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14337];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\1\11\24\1\3\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\2\1\3\0\2\1\1\11"+
    "\5\1\1\0\1\1\2\0\3\1\2\0\4\1\1\11"+
    "\1\1\1\0\5\1\1\11\1\0\14\1\1\0\2\1"+
    "\1\11\1\1\6\0\1\11\2\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\0\2\1\1\0\2\1\2\0"+
    "\6\1\6\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\4\1\1\0\12\1\2\0\4\1\4\0\1\1\5\0"+
    "\3\1\6\0\4\1\2\0\1\1\1\0\1\11\1\0"+
    "\1\1\3\0\2\1\1\0\2\1\1\0\3\1\3\0"+
    "\3\1\7\0\1\11\1\0\1\1\5\0\4\1\4\0"+
    "\1\1\1\0\1\1\1\11\3\1\1\0\2\1\2\0"+
    "\1\1\2\0\1\1\3\0\3\1\2\0\5\1\2\0"+
    "\1\1\2\0\5\1\3\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 278) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return new Symbol(sym.ADVERBIO, new Token(yychar,yyline,new String(yytext())));
          }
        case 14: break;
        case 3: 
          { return new Symbol(sym.ADJETIVO, new Token(yychar,yyline,new String(yytext())));
          }
        case 15: break;
        case 1: 
          { return new Symbol(sym.ERROR_LEXICO, new Token(yychar,yyline,new String(yytext())));
          }
        case 16: break;
        case 4: 
          { return new Symbol(sym.PREPOSICION, new Token(yychar,yyline,new String(yytext())));
          }
        case 17: break;
        case 13: 
          { return new Symbol(sym.NOMBRE_PROPIO, new Token(yychar,yyline,new String(yytext())));
          }
        case 18: break;
        case 7: 
          { return new Symbol(sym.SIGNO_PUNTUACION, new Token(yychar,yyline,new String(yytext())));
          }
        case 19: break;
        case 9: 
          { return new Symbol(sym.PRONOMBRE, new Token(yychar,yyline,new String(yytext())));
          }
        case 20: break;
        case 11: 
          { return new Symbol(sym.PALABRA_RESERVADA, new Token(yychar,yyline,new String(yytext())));
          }
        case 21: break;
        case 6: 
          { return new Symbol(sym.LITERAL, new Token(yychar,yyline,new String(yytext())));
          }
        case 22: break;
        case 8: 
          { return new Symbol(sym.OTRO, new Token(yychar,yyline,new String(yytext())));
          }
        case 23: break;
        case 12: 
          { return new Symbol(sym.SUSTANTIVO, new Token(yychar,yyline,new String(yytext())));
          }
        case 24: break;
        case 10: 
          { return new Symbol(sym.VERBO, new Token(yychar,yyline,new String(yytext())));
          }
        case 25: break;
        case 2: 
          { 
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
