
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 26 10:53:22 PST 2014
//----------------------------------------------------

package traductor;

import java_cup.runtime.*;
import traductor.Oracion;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 26 10:53:22 PST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\005\003\000\002\005\003\000\002\011\002" +
    "\000\002\012\002\000\002\013\002\000\002\005\011\000" +
    "\002\014\002\000\002\015\002\000\002\016\002\000\002" +
    "\005\011\000\002\017\002\000\002\005\006\000\002\005" +
    "\003\000\002\020\002\000\002\005\005\000\002\021\002" +
    "\000\002\022\002\000\002\023\002\000\002\005\012\000" +
    "\002\007\003\000\002\024\002\000\002\007\006\000\002" +
    "\025\002\000\002\010\006\000\002\006\003\000\002\026" +
    "\002\000\002\027\002\000\002\030\002\000\002\006\011" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\016\005\005\006\015\011\011\012\013\013" +
    "\014\014\007\001\002\000\006\002\uffff\015\066\001\002" +
    "\000\010\002\uffeb\005\uffeb\015\uffeb\001\002\000\010\002" +
    "\ufffe\005\063\015\ufffe\001\002\000\006\005\ufff1\012\ufff1" +
    "\001\002\000\004\002\056\001\002\000\004\004\ufff8\001" +
    "\002\000\010\002\ufffd\005\045\015\ufffd\001\002\000\012" +
    "\002\uffe6\005\uffe6\015\uffe6\017\uffe5\001\002\000\004\004" +
    "\ufffc\001\002\000\004\005\uffef\001\002\000\010\002\ufff2" +
    "\005\017\015\ufff2\001\002\000\004\017\uffe8\001\002\000" +
    "\004\017\021\001\002\000\010\002\uffe7\005\uffe7\015\uffe7" +
    "\001\002\000\004\005\023\001\002\000\004\004\uffee\001" +
    "\002\000\004\004\025\001\002\000\004\012\uffed\001\002" +
    "\000\004\012\013\001\002\000\004\005\030\001\002\000" +
    "\006\002\uffec\015\uffec\001\002\000\004\004\032\001\002" +
    "\000\004\012\ufffb\001\002\000\004\012\034\001\002\000" +
    "\004\005\ufffa\001\002\000\004\005\036\001\002\000\006" +
    "\002\ufff9\015\ufff9\001\002\000\004\017\040\001\002\000" +
    "\004\017\uffe4\001\002\000\004\017\042\001\002\000\004" +
    "\012\uffe3\001\002\000\004\012\044\001\002\000\010\002" +
    "\uffe2\005\uffe2\015\uffe2\001\002\000\004\010\uffea\001\002" +
    "\000\004\010\047\001\002\000\010\002\uffe9\005\uffe9\015" +
    "\uffe9\001\002\000\004\004\051\001\002\000\004\012\ufff7" +
    "\001\002\000\004\012\053\001\002\000\004\005\ufff6\001" +
    "\002\000\004\005\055\001\002\000\006\002\ufff5\015\ufff5" +
    "\001\002\000\004\002\001\001\002\000\006\005\005\012" +
    "\013\001\002\000\004\005\017\001\002\000\006\002\ufff0" +
    "\015\ufff0\001\002\000\004\005\045\001\002\000\004\010" +
    "\ufff4\001\002\000\004\010\065\001\002\000\006\002\ufff3" +
    "\015\ufff3\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\014\002\007\005\003\006\015\007\005\010" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\056\001\001\000\002\001\001\000" +
    "\004\014\047\001\001\000\002\001\001\000\004\026\036" +
    "\001\001\000\004\011\030\001\001\000\004\021\021\001" +
    "\001\000\002\001\001\000\004\025\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\023\001\001\000\002\001\001\000\004\023\025\001\001" +
    "\000\004\006\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\032\001\001\000\002" +
    "\001\001\000\004\013\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\040\001\001" +
    "\000\002\001\001\000\004\030\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\051\001\001\000\002\001\001\000\004\016\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\057\007\060\010\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
   public String errores = "";
    
    public void syntax_error(Symbol sim){
        Token token = (Token) sim.value;
        report_error("Error de sintaxis. Linea: "+(token.getLinea() + 1)+
                   ". En: \"" + token.getNombre()+"\".",null);
    }

    public void decInv(String pDato){
        errores += " Declaración de "+pDato+" inválida.\n";
    }
    
    public void addDescripcion(String pDescripcion){
        errores += " "+pDescripcion+".\n";
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Numero ::= PALABRA_RESERVADA NT$13 OTRO NT$14 OTRO NT$15 PALABRA_RESERVADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token pr2n = (Token)pr2; Oracion x = new Oracion(pr2n.getNombre()); x.getPalabras(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numero",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token o2n = (Token)o2; Oracion x = new Oracion(o2n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token on = (Token)o; Oracion x = new Oracion(on.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$13 ::= 
            {
              Object RESULT =null;
		int pr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token pr1n = (Token)pr1; Oracion x = new Oracion(pr1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Numero ::= PALABRA_RESERVADA 
            {
              Object RESULT =null;
		int pr3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pr3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token pr3n = (Token)pr3; Oracion x = new Oracion(pr3n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numero",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BaseOracion ::= Numero SUSTANTIVO NT$12 OTRO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sust1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sust1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sust1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token o1n = (Token)o1; Oracion x = new Oracion(o1n.getNombre()); x.getPalabras(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BaseOracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$12 ::= 
            {
              Object RESULT =null;
		int sust1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sust1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sust1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token sust1n = (Token)sust1; Oracion x = new Oracion(sust1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OracionBasica ::= BaseOracion SUSTANTIVO NT$11 PREPOSICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sust1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sust1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sust1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prep1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prep1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prep1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token prep1n = (Token)prep1; Oracion x = new Oracion(prep1n.getNombre()); x.getPalabras(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OracionBasica",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$11 ::= 
            {
              Object RESULT =null;
		int sust1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sust1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sust1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token sust1n = (Token)sust1; Oracion x = new Oracion(sust1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OracionBasica ::= SUSTANTIVO 
            {
              Object RESULT =null;
		int sust1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sust1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sust1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token sust1n = (Token)sust1; Oracion x = new Oracion(sust1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OracionBasica",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Oracion ::= ADJETIVO NT$8 SUSTANTIVO NT$9 VERBO NT$10 Numero SUSTANTIVO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int adj1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int adj1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object adj1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sust3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sust3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object sust3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int verb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int verb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object verb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sust1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sust1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sust1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token sust1n = (Token)sust1; Oracion x = new Oracion(sust1n.getNombre()); x.getPalabras(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int adj1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int adj1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object adj1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sust3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sust3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sust3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int verb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int verb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object verb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token verb1n = (Token)verb1; Oracion x = new Oracion(verb1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int adj1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int adj1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object adj1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sust3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sust3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sust3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token sust3n = (Token)sust3; Oracion x = new Oracion(sust3n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =null;
		int adj1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adj1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object adj1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token adj1n = (Token)adj1; Oracion x = new Oracion(adj1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Oracion ::= LITERAL NT$7 OracionBasica 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lit1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lit1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lit1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =null;
		int lit1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lit1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token lit1n = (Token)lit1; Oracion x = new Oracion(lit1n.getNombre()); x.getPalabras(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Oracion ::= Numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Oracion ::= OracionBasica SUSTANTIVO NT$6 PREPOSICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sust2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sust2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sust2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prep1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prep1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prep1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token prep1n = (Token)prep1; Oracion x = new Oracion(prep1n.getNombre()); x.getPalabras(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =null;
		int sust2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sust2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sust2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token sust2n = (Token)sust2; Oracion x = new Oracion(sust2n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Oracion ::= NOMBRE_PROPIO NT$3 VERBO NT$4 PALABRA_RESERVADA NT$5 SUSTANTIVO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int np1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int np1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object np1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int verb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int verb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object verb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sust1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sust1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sust1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token sust1n = (Token)sust1; Oracion x = new Oracion(sust1n.getNombre()); x.getPalabras(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int np1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int np1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object np1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int verb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int verb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object verb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token pr1n = (Token)pr1; Oracion x = new Oracion(pr1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int np1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int np1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object np1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int verb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int verb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object verb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token verb1n = (Token)verb1; Oracion x = new Oracion(verb1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
		int np1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int np1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object np1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token np1n = (Token)np1; Oracion x = new Oracion(np1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Oracion ::= PRONOMBRE NT$0 VERBO NT$1 PALABRA_RESERVADA NT$2 SUSTANTIVO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pron1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pron1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pron1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int verb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int verb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object verb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sust1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sust1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sust1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token sust1n = (Token)sust1; Oracion x = new Oracion(sust1n.getNombre()); x.getPalabras(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pron1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pron1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pron1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int verb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int verb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object verb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token pr1n = (Token)pr1; Oracion x = new Oracion(pr1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pron1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pron1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pron1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int verb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int verb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object verb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token verb1n = (Token)verb1; Oracion x = new Oracion(verb1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int pron1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pron1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pron1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Token pron1n = (Token)pron1; Oracion x = new Oracion(pron1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Oracion ::= BaseOracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Oracion ::= OracionBasica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Texto ::= Oracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Texto",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Texto ::= Oracion SIGNO_PUNTUACION 
            {
              Object RESULT =null;
		int sp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token sp1n = (Token)sp1; System.out.println(sp1n.getNombre()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Texto",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Texto EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

